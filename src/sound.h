#define AY_RATE                     (Z80_FREQ / 16)
#define MAX_AMP                     (0xFFFF / 6)
#define FRACT_BITS                  14

enum AY_Register {
    ToneALow, ToneAHigh,
    ToneBLow, ToneBHigh,
    ToneCLow, ToneCHigh,
    Noise,
    Mixer,
    VolA, VolB, VolC,
    EnvLow, EnvHigh, EnvShape,
    PortA, PortB
};
enum AY_Stereo { Left, Right };
enum AY_Channel { A, B, C };
enum FE_ReadWrite {
    TapeOut     = 0b00001000, // 0 on
    Speaker     = 0b00010000, // 1 on
    TapeIn      = 0b01000000  // 1 on
};

class Sound : public Device {
    public:
        Sound();
        ~Sound();
        void setup(int sample_rate, int cutoff_rate, int frame_clk);
        void set_lpf(int cutoff_rate);
        void set_ay_volume(float volume, AY_Mixer channel_mode, float side_level, float center_level, float penetr_level);
        void set_speaker_volume(float volume) { speaker_volume = volume; };
        void set_tape_volume(float volume) { tape_volume = volume; };
        void update(s32 clk);
        void queue();

        void read(u16 port, u8* byte, s32 clk);
        void write(u16 port, u8 byte, s32 clk);
        void frame(s32 frame_clk);
        void reset();


    protected:
        s16 *buffer = NULL;
        SDL_AudioDeviceID device_id = 0;
        SDL_AudioSpec audio_spec;
        s32 sample_rate;
        u32 frame_samples;
        float cpu_inc;
        u32 ay_fract;
        u32 tone_a_counter, tone_b_counter, tone_c_counter, noise_counter, envelope_counter;
        u32 tone_a_limit, tone_b_limit, tone_c_limit, noise_limit, envelope_limit;
        bool tone_a, tone_b, tone_c, noise;
        u8 envelope;
        s32 envelope_pos;
        u32 noise_seed;
        /*
        The envelope counter on the AY-3-8910 has 16 steps. On the YM2149 it has twice the steps, happening twice as fast.
        C AtAlH
        0 0 x x  \___ 0-3
        0 1 x x  /___ 4
        1 0 0 0  \\\\ 8
        1 0 0 1  \___ 9
        1 0 1 0  \/\/ 10
        1 0 1 1  \``` 11
        1 1 0 0  //// 12
        1 1 0 1  /``` 13
        1 1 1 0  /\/\ 14
        1 1 1 1  /___ 15
        */
        const u8 envelope_shape[0x20 * 0x10] = {
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \|\ */
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \/ */
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \-- */
            0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|/ */
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /-- */
            0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /\ */
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|__*/
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        // Posted to comp.sys.sinclair in Dec 2001 by Matthew Westcott.
        /*
        const float volume_table[0x10] = {
            0.000000, 0.013748, 0.020462, 0.029053, 0.042343, 0.061844, 0.084718, 0.136903,
            0.169130, 0.264667, 0.352712, 0.449942, 0.570382, 0.687281, 0.848172, 1.000000
        };*/
        u16 mixer[sizeof(AY_Stereo)][sizeof(AY_Channel)][0x10];
        /* Channel A fine pitch            8-bit (0-255)
           Channel A course pitch          4-bit (0-15)
           Channel B fine pitch            8-bit (0-255)
           Channel B course pitch          4-bit (0-15)
           Channel C fine pitch            8-bit (0-255)
           Channel C course pitch          4-bit (0-15)
           Noise pitch                     5-bit (0-31)
           Mixer                           8-bit (see below)
           Channel A volume                4-bit (0-15, see below)
           Channel B volume                4-bit (0-15, see below)
           Channel C volume                4-bit (0-15, see below)
           Envelope fine duration          8-bit (0-255)
           Envelope course duration        8-bit (0-255)
           Envelope shape                  4-bit (0-15)
           I/O port A                      8-bit (0-255)
           I/O port B                      8-bit (0-255) */
        u8 registers[0x10];
        u8 wFE, rFE, wFFFD;
        float speaker_volume, tape_volume;
        u32 left, right;
        u32 lpf_fract;
        s32 pos;
};
