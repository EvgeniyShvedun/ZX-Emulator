#define AY_RATE                     (1774400 / 8.0)
#define TAPE_OUT                    0b00001000
#define SPEAKER                     0b00010000
#define TAPE_IN                     0b01000000

enum AY_Register {
    A_PCH_L, A_PCH_H,
    B_PCH_L, B_PCH_H,
    C_PCH_L, C_PCH_H,
    N_PCH,
    MIX,
    A_VOL, B_VOL, C_VOL,
    ENV_L, ENV_H, ENV_SHAPE,
    PORT_A, PORT_B
};
enum AY_Stereo { Left, Right };
enum AY_Channel { A, B, C };

class Sound : public Device {
/*
Register       Function                        Range
               Channel A fine pitch            8-bit (0-255)
               Channel A course pitch          4-bit (0-15)
               Channel B fine pitch            8-bit (0-255)
               Channel B course pitch          4-bit (0-15)
               Channel C fine pitch            8-bit (0-255)
               Channel C course pitch          4-bit (0-15)
               Noise pitch                     5-bit (0-31) 
               Mixer                           8-bit (see below)
               Channel A volume                4-bit (0-15, see below)
               Channel B volume                4-bit (0-15, see below)
               Channel C volume                4-bit (0-15, see below)
               Envelope fine duration          8-bit (0-255)
               Envelope course duration        8-bit (0-255)
               Envelope shape                  4-bit (0-15) 
               I/O port A                      8-bit (0-255)
               I/O port B                      8-bit (0-255)
*/
    public:
        Sound();
        ~Sound();
        void setup(int sample_rate, int lpf_rate, int frame_clk);
        void set_lpf(int sample_rate, int lpf_rate);
        void set_mixer(AY_Mixer mode, float side_level = 1.0, float center_level = 0.5, float penetr_level = 0.25);
        void set_ay_volume(float volume) { ay_volume = volume; };
        void set_speaker_volume(float volume) { speaker_volume = volume; };
        void set_tape_volume(float volume) { tape_volume = volume; };
        void update(s32 clk);
        void pause(bool state = true);
        void queue();

        void read(u16 port, u8* byte, s32 clk);
        void write(u16 port, u8 byte, s32 clk);
        void frame(s32 frame_clk);
        void reset();

    protected:
        int sample_rate;
        unsigned int frame_samples;
        float increment, factor;
        signed char tone_a, tone_b, tone_c, noise, envelope;
        float tone_a_counter, tone_b_counter, tone_c_counter, noise_counter, envelope_counter;
        float tone_a_limit, tone_b_limit, tone_c_limit, noise_limit, envelope_limit;
        int envelope_pos;
        unsigned int noise_seed;
        /*
        The envelope counter on the AY-3-8910 has 16 steps. On the YM2149 it has twice the steps, happening twice as fast.
        C AtAlH
        0 0 x x  \___ 0-3
        0 1 x x  /___ 4
        1 0 0 0  \\\\ 8
        1 0 0 1  \___ 9
        1 0 1 0  \/\/ 10
        1 0 1 1  \``` 11
        1 1 0 0  //// 12
        1 1 0 1  /``` 13
        1 1 1 0  /\/\ 14
        1 1 1 1  /___ 15
        */
        const unsigned char envelope_shape[0x20 * 0x10] = {
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|_ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \|\ */
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \__ */
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \/ */
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, /* \-- */
            0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|/ */
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /-- */
            0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /\ */
            0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, /* /|__*/
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        AY_Mixer mixer_mode;
        float mixer[sizeof(AY_Mixer)][sizeof(AY_Stereo)][sizeof(AY_Channel)];
        // Posted to comp.sys.sinclair in Dec 2001 by Matthew Westcott.
        const float ay_volume_table[0x10] = {
            0.000000, 0.013748, 0.020462, 0.029053, 0.042343, 0.061844, 0.084718, 0.136903,
            0.169130, 0.264667, 0.352712, 0.449942, 0.570382, 0.687281, 0.848172, 1.000000
        };
        unsigned char registers[0x10];
        unsigned char port_wFE, port_rFE, port_wFFFD;
        float ay_volume, speaker_volume, tape_volume;
        float left, right;
        float lpf_alpha;
        short *buffer = NULL;
        int frame_pos;
};
